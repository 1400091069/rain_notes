#  shell概念

在计算机科学中，Shell俗称壳（用来区别于核），是指“**为使用者提供操作界面”的软件（命令解析器）。它类似于[DOS](https://baike.baidu.com/item/DOS)下的command.com和后来的cmd.exe**。它接收用户命令，然后调用相应的应用程序。

**同时它又是一种[程序设计语言](https://baike.baidu.com/item/程序设计语言)**。作为命令语言，它交互式解释和执行用户输入的命令或者自动地解释和执行预先设定好的一连串的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在[高级语言](https://baike.baidu.com/item/高级语言)中才具有的控制结构，包括循环和分支。

和Python相同  脚本编程语言 线下Python更广泛：字符串解析 数据挖掘  偏向底层服务器python都能胜任

 shell是什么：解析执行用户的命令 命令解析器  

* 支持交互式(interactive  逐句执行)

* 支持批处理(batch 写一个shell脚本 shell顺序执行)  

* 与编程类语言相识 有变量和流程控制  但是解释性语言

~~~shell
[root@java26master ~]# echo $SHELL #获取当前shell的版本
/bin/bash
[root@java26master ~]# (ll;date;ls -a;)  #批处理  命令之间分号相隔
总用量 4
----rwxrwx. 1 root root    0 9月  27 09:38 1.txt
-rw-------. 1 root root 1236 9月  25 18:55 anaconda-ks.cfg
2020年 09月 27日 星期日 10:01:37 CST
.  ..  1.txt  anaconda-ks.cfg  .bash_history  .bash_logout  .bash_profile  .bashrc  .cshrc  .tcshrc  .viminfo
~~~

# shell的案例

* 方式1：通过window创建一个文件

  >  创建一个.sh文件

  ![1601172499777](../imgs/1601172499777.png)

> 把文件传递给linux

​       选择1：通过xshell关联的ftp![1601172698791](../imgs/1601172698791.png)

​          选择2：通过rz

​          需要先安装lrzsz ：   `yum install lrzsz -y` 

​           然后rz： 选择要上传的文件即可

> 授予当前用户对test01.sh的执行权

~~~shell
[root@java26master ~]# chmod u=rwx test01.sh 
~~~

> 执行此shell文件

~~~shell
[root@java26master ~]# ./test01.sh       #通过.来执行
[root@java26master ~]# . /root/test01.sh
[root@java26master ~]# source test01.sh      #通过source来执行
[root@java26master ~]# source /root/test01.sh
[root@java26master ~]#/bin/bash /root/test01.sh   #通过/bin/bash来执行
[root@java26master ~]# /bin/bash test01.sh
~~~

* 方式2：linux自己创建文件

~~~shell
[root@java26master ~]# touch test02.sh  #创建一个.sh文件
[root@java26master ~]# vim test02.sh   #对test02编辑
[root@java26master ~]# cat test02.sh  #查看文件
date;
ls;
echo 11;
i=1;echo $i;
[root@java26master ~]# chmod 777 test02.sh  #指定权限
[root@java26master ~]# source test02.sh   #执行文件
2020年 09月 27日 星期日 10:24:39 CST
1.txt  anaconda-ks.cfg  test01.sh  test02.sh
11
1
~~~

# shell语法

### shell数据类型

* 字符串类型     可以写在单引号和双引号中
* 整数类型
* 浮点类型

### 定义变量

格式：变量名=值;    

* 注意1：等号两边不能有空格

* 注意2：语句结束用分号

### $符的使用

* 获取变量的值：   $i
* 获取变量的值：   ${i}
* 获取运算结果：   $((i+1))
* 获取运算结果：   $[i+1]
* 执行命令：           $(line)

```shell
[root@java26master ~]# echo $i;   #获取变量的值
1
[root@java26master ~]# echo ${i};   #获取变量的值
1
[root@java26master ~]# echo $((i+1));  #获取运算的结果
2
[root@java26master ~]# echo $[i+1];   #获取运算的结果
2
[root@java26master ~]# echo $(ll);   #执行命令
总用量 12 ----rwxrwx. 1 root root 0 9月 27 09:38 1.txt -rw-------. 1 root root 1236 9月 25 18:55 anaconda-ks.cfg -rwxr--r--. 1 root root 111 9月 27 10:22 test01.sh -rwxrwxrwx. 1 root root 32 9月 27 10:23 test02.sh
[root@java26master ~]# echo $(date); #执行命令
2020年 09月 27日 星期日 10:30:35 CST       
```

### 运算符 操作数字

* -eq 相等

* -ne 不相等

* -lt 小于

* -le 小于等于

* -gt 大于

* -ge大于等于

* ! 取反

* -a 与

* -o 或

  ~~~shell
  [root@java26master ~]# i=4; test $i -lt  5 ; echo $?;
  0  #判断i是不是小于5
  [root@java26master ~]# i=4; test $i -lt  5 -a $i -gt 1 ; echo $?;
  0  #判断i是不是大于1 并且小于5
  ~~~

### 运算符  操作字符串

* =  判断相同
* != 判断不相同
* -f 是否为文件
* -d是否为文件夹
* -z  是否为空
* -n 是否为空

~~~shell
[root@java26master ~]# s="abc";
[root@java26master ~]# test $s = "abc";echo $?;
0   #判断字符串s是不是等于"abc"
[root@java26master ~]# test $s != "abc";echo $?;
1   #判断字符串s是不是不等于"abc"
[root@java26master ~]# test -z $s;echo $?;
1   #判断字符串s是不是空字符串
[root@java26master ~]# s="1.txt";
[root@java26master ~]# test  -f  $s ; echo $? 
0   #判断字符串s表示的是不是当前目录下文件的名字
[root@java26master ~]# mkdir aa;
[root@java26master ~]# s="aa";
[root@java26master ~]# test -d $s; echo $?
0   #判断字符串s表示的是不是当前目录下文件夹的名字

~~~

### 条件

* test
* []     :两边必须有空格

### 输出结果

* echo $?  输出上一个语句的结果

~~~shell
[root@java26master ~]# i=3;#定义变量
[root@java26master ~]# test $i -gt 1; #判断变量i的值是否大于1
[root@java26master ~]# echo $?;  #输出上一个语句的结果
0
[root@java26master ~]# #在shell中1表示false  0表示true
~~~

### 选择结构 if else

单分支格式：  if  condition ；then    statement  fi;

~~~shell
[root@java26master ~]# #根据性别判断称呼：如果是男 显示帅哥
[root@java26master ~]# sex="男";
[root@java26master ~]# if test ${sex} = "男";then
> echo $sex"称呼是帅哥！";
> fi;
男称呼是帅哥！
~~~

双分支格式： if  condition ；then    statement1   else statement2  fi;

~~~shell
[root@java26master ~]# sex="女";
[root@java26master ~]# if test ${sex} = "男"; then
> echo ${sex}"称呼是帅哥！";
> else
> echo ${sex}"称呼是美女！";
> fi;
女称呼是美女！
~~~

多分支格式： if  condition1 ；then    statement1  elif condition2; then statement2  else statement2  fi;

~~~shell
[root@java26master ~]# month=12;#根据月份判断季节
[root@java26master ~]# if test $month -eq 3 -o ${month} -eq 4 -o $month -eq 5;then
> jijie="春季";
> elif test $month -ge 6 -a $month -le 8; then
> jijie="夏季";
> elif test $month -ge 9 -a $month -le 11; then
> jijie="秋季";
> else
> jijie="冬季";
> fi;
[root@java26master ~]# echo $jijie;
冬季
~~~

ifelse练习：根据月份和年获取天数

~~~shell
read month; #获取键盘输入
read year;  #获取键盘输入
if test $month -eq 4 -o $month -eq 6 -o $month -eq 9 -o $month -eq 11;then
days=30;
elif test $month -eq 2;then
# 判断是不是闰年
       if test $[year%4] -eq 0 -a $[year%100] -ne 0; then
       days=29;
       elif test $[year%400] -eq 0;then
       days=29;
       else
       days=28;
       fi;
else
     days=31;
fi;
echo $year"年"$month"月有"$days"天";
~~~

### 选择结构 case      

~~~shell
# 测试case
# 根据季节判断月份
read  jijie;  #读入一个数据 赋值给变量jijie
case  ${jijie} in    #判断变量jijie的值
   "春")             #如果为春  就执行一下代码
   echo ${jijie}"对应的月份是3，4，5！";;   #;;表示当前情况代码结束
   "夏")
   echo ${jijie}"对应的月份是6，7，8！";;
   "秋")
   echo ${jijie}"对应的月份是9,10,11！";;
   "冬")
   echo ${jijie}"对应的月份是12,1,2！";;
   *)                                #*)  类似于default
   echo ${jijie}"季节输入错误！";;
esac;
~~~

### 循环结构：for

~~~shell
#for 基本格式
# for 变量 in 范围 ; do
# 循环体;
# done;

# 打印1到10的值:方式1
for i in 1 2 3 4 5 6 7 8 9 10; do
  printf ${i}" ";  #打印不换行
done;
  echo "";  #打印一个换行符号
  
# 打印1到10的值:方式2
for i in {1..10}; do
  printf ${i}",";
done;
  echo "";
  
# 打印1到10的值:方式3
for i in $(seq 10); do
  printf ${i}"-";
done;
  echo "";
  
# 打印1到10的值:方式2
for ((i=1;i <= 10;i++)); do
  printf ${i}".";
done;
  echo "";
~~~

> seq命令的使用：  实现一个变量从一个值跑到另外一个值
>
> for  i in  $(seq 10);     #表示i从1跑到10   每次加1
>
> for  i in  $(seq 2 10);     #表示i从2跑到10  每次加1
>
> for  i in  $(seq 1 2 10);     #表示i从1跑到10 每次加2

~~~shell
echo "打印乘法口诀";
for ((i=1;i<=9;i++));do
     for((j=1;j<=i;j++)); do
           printf $i"*"$j"="$[i*j]"  ";
           if [ $[i*j] -lt 10 ];then
                 printf " ";
           fi;
     done;
     echo "";
done;
~~~

~~~shell
echo "获取1到100内所有质数的和";
sumn=0;
for n in $(seq 1 100); do
     # 判断当前n是不是质数
     k=1; 
     for ((m=2;m<n;m++)); do
         if [ $[n%m] -eq 0 ];then
                k=2;
         fi;
     done;
     #根据变量k的值 是否更改来判断 n是否被m除尽过  进而判断n是不是质数
     if [ $k -eq 1 -a $n -ne 1 ];then
           echo $n"是质数！";
           sumn=$[sumn+n]; 
     fi;
done;
echo "1到100内所有质数的和="$sumn;
~~~

~~~shell
## 可以通过break来实现 结束循环
echo "获取1到100内所有质数的和";
sumn=0;
for n in $(seq 1 100); do
     # 判断当前n是不是质数
     for ((m=2;m<n;m++)); do
         if [ $[n%m] -eq 0 ];then
                break;
         fi;
     done;
     #如果循环完后m的值等于n 说明n没有被除尽过 n是质数
     if [ $m -eq $n ];then
           echo $n"是质数！";
           sumn=$[sumn+n];
     fi;
done;
echo "1到100内所有质数的和="$sumn;
~~~

### 循环结构：while

~~~shell
# while的基本格式
# while condition; do
#        statement;
# done;

# 判断获取位数上含有1的所有三位数的平均值
sumn=0;
geshu=0;   # 定义变量记录和和个数
n=100;
while [ $n -lt 1000 ]; do
    #获取n各个位数的值
    a=$((n%10));
    b=$((n/10%10));
    c=$((n/100));
    #echo $a"-"$b"-"$c;
    if [ $a -eq 1 -o $b -eq 1 -o $c -eq 1 ];then
         geshu=$[geshu+1];
         sumn=$[sumn+n];
         echo $n;
    fi;
    n=$[n+1]; # 迭代语句
done;
echo "位数上含有1的所有三位数的平均值:"$[sumn/geshu];
~~~

~~~shell
# 判断用户输入的密码是不是123 或者abc  只有五次机会
cishu=0;
while [ $cishu -lt 5 ]; do
    cishu=$[cishu+1];
    read -p "请输入密码:" userpwd;
    if [ $userpwd = "123" -o $userpwd = "abc" ];then
        break;
    else
        echo "输入的密码错误！ 您还"$[5-cishu]"有次机会";
    fi;
done;
if [ $cishu -ge  5 ]; then
    echo "输入五次都没有正确！";
else
    echo "第"$cishu"次正确了！";
fi;
~~~

### 数组：

~~~shell
# 测试数组
arr1=(1 3 1.1 "abc" 12 1.0);   #创建数组对象  元素之间不能加逗号
echo  '获取元素的个数：${#arr1[*]}='${#arr1[*]};
echo  '获取元素的个数：${#arr1[@]}='${#arr1[@]};
echo  '获取所有元素：${arr1[*]}='${arr1[*]};
echo  '获取所有元素：${arr1[@]}='${arr1[@]};
echo  '获取第一个元素：${arr1[0]}='${arr1[0]};
echo  '获取第一个元素：${arr1}='${arr1};
echo  '获取第三个元素：${arr1[2]}='${arr1[2]};
echo  '获取最后一个元素：${arr1[#arr1[*]-1]}='${arr1[((${#arr1[*]}-1))]};

length=${#arr1[*]};
echo '获取最后一个元素：'${arr1[length-1]};

#注意：由于打印的内容中有$  使用''表示字符串   ''不会对期中的字符串内容进行解析
~~~

> 数组练习

~~~shell
#获取元素的最大值
arr=(1 2 5 8 9 11 2 3);
maxval=${arr[0]};
for ((i=1;i<${#arr[*]};i++));do
     if test $maxval  -lt ${arr[$i]} ; then
               maxval=${arr[$i]};
     fi;
done;
echo ${arr[*]}"最大值是："${maxval};

#对数组元素进行排序
echo "排序之前："${arr[*]};
length=${#arr[*]};
for((i=0;i<$[length-1];i++));do
    for((j=$[i+1];j<$length;j++));do
         echo $i","$j;
         if [ ${arr[$i]} -lt ${arr[$j]}  ];then
                k=${arr[$i]};
                arr[$i]=${arr[$j]};
                arr[$j]=$k;
         fi;
    done;
done;
echo "排序之后："${arr[*]};
~~~

### 函数

~~~shell
# 函数个数：定义函数时 不需要指定参数列表和返回值类型
# 函数名(){函数体; return x;} #如果没有返回值return可以省略


#获取两个数的和
fun_1(){
    echo "第一个参数="$1;
    echo "第二个参数="$2;
    he=$[$1+$2];
    return $he;
}
#调用函数
fun_1 3 2;
#获取函数的返回值
echo "函数的返回值是："$?;

#求多个数的和
fun_2(){
  he=0;
  for i in $*;do
       he=$[he+i];
  done;
  return $he;
}
#调用函数
fun_2 3 2 3 5 6;
#获取函数的返回值
echo "函数的返回值是："$?;

#测试所有可以获取的数据
fun_3(){
    echo '$0 获取命令/程序名='$0;   #bash
    echo '$1 获取命令的第一个参数值='$1;
    echo '$3 获取命令的第三个参数值='$3;
    echo '$* 获取命令的所有参数值='$*;
    echo '$@ 获取命令的所有参数值='$@;
    echo '$# 获取参数个数='$#;
    echo '$$ 获取进程id='$$;
}
~~~

~~~shell
#获取0 1 1 2 3 5 8 13….的第n的数的值
fun(){
   a=0;
   b=1;
   if [ $1 -le 2 ];then
        # 如果n=1,2 返回 0 1;
        return $[$1-1];
   fi;
        # 需要循环 让b记录a+b 让a记录b
       for ((i=3;i<=$1;i++));do
            k=$b;
            b=$[a+b];
            a=$k;    
       done;
      return $b;
}
# 判断一个数是不是质数
pdZhiShu(){
   for ((m=2;m<$1;m++));do 
      if [ $[$1%m] -eq 0 ];then
           return 1;
      fi;
   done;
   if [ $1 -ne 1 ];then
         return 0;
   fi;
   return 1;
}

# 判断1到100内的数是不是质数
fun_3(){
   for ((n=1;n<=100;n++));do
       pdZhiShu $n;
       jieguo=$?;
       if [ $jieguo -eq 0 ];then
            echo $n"是质数";
       fi; 
   done;
}
~~~







### 其他：斐波那契的实现

~~~java
public  class Test{
    public int get1(n){
	    int[] arr=new int[n];
		for(int i=0;i<n;n++){
		    if(i<=1){
			    arr[i]=i;
			}else{
			   arr[i]=arr[i-1]+arr[i-2];
			}
		}
		return arr[n-1];
	}
	public int get2(n){
	    int a=0,b=1;
		    if(n<=2){
			    return n-1;
			}
			for(i=3;i<=n;i++){
			     int k=b;
				 b=a+b;
				 a=k;
			}
			return b;
		}
	}
	public int get3(n){
		    if(n<=2){
			    return n-1;
			}
			return get3(n-1)+get3(n-2);
		}
	}
}
~~~

























* 
